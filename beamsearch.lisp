(setq grafo '(
           ((4 1) (3 1))
           ((3 1) (3 2))
           ((3 2) (2 2))
           ((2 2) (1 2))
           ((1 2) (1 3))
           ((1 3) (1 4))
           ((3 2) (3 3))
           ((3 3) (3 4))
           ((3 4) (4 4))
           ((4 4) (5 4))
           ((5 4) (6 4))
           ((4 1) (5 1))
           ((5 1) (5 2))
           ((5 2) (6 2))
           ((6 2) (7 2))
           ((7 2) (7 1))
           ((6 2) (6 3))
           ((6 3) (6 4))
           ((6 4) (7 4))
           ((7 4) (7 5))
           ((7 5) (7 6))
           ((7 6) (6 6))
           ((6 6) (5 6))
           ((5 6) (4 6))
           ))
           
(setq objetivo '(4 6))
(setq maxaltura 7)
(setq maxbase 6)
(setq primeraGen '((1 1) (1 1) (1 1) (1 1) (1 1)))

(defun vecinos (vert graf)
  (cond ((null graf) nil)
        ((equal (first (car graf)) vert) 
         (cons (second (car graf)) (vecinos vert (cdr graf))))
        (t (vecinos vert (cdr graf)))))
        
        
(defun auxReinicioAleatorio (max)
  (+ (random max) 1)
)

(defun candidatoExiste (graf vert)
  (cond ((null graf) nil)
        ((equal vert (car (car graf))) t)
        (t (candidatoExiste (cdr graf) vert))
   )
)

(defun reinicioAleatorio (vert)
  (setq candidato (list (auxReinicioAleatorio maxaltura) (auxReinicioAleatorio maxbase)))
  (cond ((candidatoExiste grafo candidato) candidato)
        (t (reinicioAleatorio vert))
  )
)

(defun distanciaManhattan (vert)
  (+ (abs (- (car vert) (car objetivo))) (abs (- (car (cdr vert)) (car (cdr objetivo)))))
)

(defun auxMejorOpcion (opciones resp)
 (cond ((null opciones) resp)
       ((< (distanciaManhattan resp) (distanciaManhattan (car opciones))) (auxMejorOpcion (cdr opciones) resp))
       (t (auxMejorOpcion (cdr opciones) (car opciones)))
 )
)

(defun mejorOpcion (vert)
  (cond ((null (car (vecinos vert grafo))) (auxMejorOpcion (vecinos vert grafo) vert ))
        (t (auxMejorOpcion (vecinos vert grafo) (car (vecinos vert grafo))))
  )
)

(defun primeraGeneracion (individuos)
  (mapcar #'reinicioAleatorio individuos)
)

(defun nuevaGeneracion (individuos)
  (mapcar #'mejorOpcion individuos)
)

(defun respuestaEncontrada (individuos)
  ;(print (car individuos))
  (cond ((null individuos) nil)
        ((equal (car individuos) objetivo) (car individuos))
        (t(respuestaEncontrada (cdr individuos)))
  )
)

(defun busqueda (individuos)
  (print individuos)
  (cond ((equal (respuestaEncontrada individuos) objetivo) (respuestaEncontrada individuos))
        (t (busqueda (nuevaGeneracion individuos)))
  )
 )


(busqueda (primeraGeneracion primeraGen))