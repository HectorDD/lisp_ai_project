(setq grafo '(
           ((4 1) (3 1))
           ((3 1) (3 2))
           ((3 2) (2 2))
           ((2 2) (1 2))
           ((1 2) (1 3))
           ((1 3) (1 4))
           ((3 2) (3 3))
           ((3 3) (3 4))
           ((3 4) (4 4))
           ((4 4) (5 4))
           ((5 4) (6 4))
           ((4 1) (5 1))
           ((5 1) (5 2))
           ((5 2) (6 2))
           ((6 2) (7 2))
           ((7 2) (7 1))
           ((6 2) (6 3))
           ((6 3) (6 4))
           ((6 4) (7 4))
           ((7 4) (7 5))
           ((7 5) (7 6))
           ((7 6) (6 6))
         ;  ((6 6) (5 6))
           ((5 6) (4 6))
           ))
           
(setq objetivo '(4 6))
(setq inicio '((4 1)))
(defun elimVisitados (front visit resp)
  (cond ((null front) resp)
        ((member (car front) visit)(elimVisitados (cdr front) visit resp))
        (t (elimVisitados (cdr front) visit (append resp (list (car front)))))))
        
(defun nuevaFrontera (vecinos front visit)
  (elimVisitados (append (cdr front) vecinos ) visit nil)
)
(defun vecinos (vert graf)
  (cond ((null graf) nil)
        ((equal (first (car graf)) vert) 
         (cons (second (car graf)) (vecinos vert (cdr graf))))
        (t (vecinos vert (cdr graf)))))
;-------------Principal ;
(defun busqueda (graf front resp visit) 
  ;(print front)
  (cond ((null front) resp)
        ((equal (car front) objetivo )(cons (car front) resp))
        (t (let ((x (car front)))
             (if (member x visit)
                 (busqueda graf (nuevaFrontera (vecinos x graf) front visit) resp (cons x visit))
                 (busqueda graf (nuevaFrontera (vecinos x graf) front visit) (cons x resp) (cons x visit)))))))
                 
                 
;(busqueda grafo inicio nil nil)